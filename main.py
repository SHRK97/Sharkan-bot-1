# main.py
import os
import json
import logging
import random
import threading
import time
from datetime import datetime, timedelta
from telebot import TeleBot, types

# === –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

bot = TeleBot(BOT_TOKEN)
VERSION = "SHARKAN BOT v1.3 ‚Äî RUN + BOOKS + PROFILE + PLAN + STATS + COINS + SHOP + BACKUP + LEADERBOARD"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    filemode="a",
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s"
)

# === –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
USER_PROFILE_FILE = "user_profiles.json"
if os.path.exists(USER_PROFILE_FILE):
    with open(USER_PROFILE_FILE, "r", encoding="utf-8") as f:
        user_profiles = json.load(f)
else:
    user_profiles = {}

def save_profiles():
    try:
        with open(USER_PROFILE_FILE, "w", encoding="utf-8") as f:
            json.dump(user_profiles, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logging.error(f"[SAVE_PROFILE_ERROR] {e}")

# === –Ø–∑—ã–∫–∏ ===
LANGUAGES = {'ua': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}
user_lang = {}
for uid, profile in user_profiles.items():
    if "language" in profile:
        user_lang[uid] = profile["language"]

def get_lang(user_id: str) -> str:
    return user_lang.get(user_id, "ua")

# === –ö–Ω–∏–≥–∏ ===
user_states = {}         # —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏
page_jump_state = {}     # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

try:
    with open("books_ua.json", "r", encoding="utf-8") as f:
        all_books = json.load(f)
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–Ω–∏–≥: {e}")
    all_books = []

def clamp(val, lo, hi):
    return max(lo, min(hi, val))

def show_book_page(chat_id, user_id):
    state = user_states.get(user_id, {})
    title = state.get("book_title")
    page = state.get("page", 0)

    for book in all_books:
        if book.get("title") == title:
            pages = book.get("pages", [])
            if not pages:
                bot.send_message(chat_id, "‚ùå –ö–Ω–∏–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")
                return
            page = clamp(page, 0, len(pages) - 1)
            user_states[user_id]["page"] = page

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –í–ø–µ—Ä–µ–¥")
            markup.add("üî¢ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏", "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
            bot.send_message(
                chat_id,
                f"üìò *{title}*\n\nüìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1} –∑ {len(pages)}:\n\n{pages[page]}",
                parse_mode="Markdown",
                reply_markup=markup
            )
            return
    bot.send_message(chat_id, "‚ùå –ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@bot.message_handler(func=lambda msg: msg.text == "üìö –ö–Ω–∏–≥–∏ SHARKAN")
def show_book_list(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for book in all_books:
        markup.add(f"üìñ {book.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∏')}")
    markup.add("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üìö –û–±–µ—Ä–∏ –∫–Ω–∏–≥—É:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("üìñ "))
def handle_book_selection(message):
    user_id = str(message.from_user.id)
    title = message.text.replace("üìñ ", "", 1).strip()
    for book in all_books:
        if book.get("title") == title:
            user_states[user_id] = {"book_title": title, "page": 0}
            show_book_page(message.chat.id, user_id)
            return
    bot.send_message(message.chat.id, "‚ùå –ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@bot.message_handler(func=lambda msg: msg.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –í–ø–µ—Ä–µ–¥"])
def handle_book_page_nav(message):
    user_id = str(message.from_user.id)
    if user_id not in user_states or "book_title" not in user_states[user_id]:
        return
    if message.text == "‚û°Ô∏è –í–ø–µ—Ä–µ–¥":
        user_states[user_id]["page"] += 1
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_states[user_id]["page"] -= 1
    show_book_page(message.chat.id, user_id)

@bot.message_handler(func=lambda m: m.text in ["üî¢ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏","üî¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ","üî¢ Go to page"])
def ask_page_num(message):
    uid = str(message.from_user.id)
    st = user_states.get(uid, {})
    if "book_title" not in st:
        return
    page_jump_state[uid] = st["book_title"]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ / —Å—Ç—Ä–∞–Ω–∏—Ü—ã / page (1..N).")

@bot.message_handler(func=lambda m: str(m.from_user.id) in page_jump_state and (m.text or "").strip().isdigit())
def do_page_jump(message):
    uid = str(message.from_user.id)
    title = page_jump_state.get(uid)
    if not title:
        return
    target = int(message.text.strip()) - 1

    book = next((b for b in all_books if b.get("title") == title), None)
    if not book:
        bot.send_message(message.chat.id, "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ / –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        page_jump_state.pop(uid, None)
        return

    pages = book.get("pages", [])
    if not pages:
        bot.send_message(message.chat.id, "‚ùå –£ —Ü—ñ—î—ó –∫–Ω–∏–≥–∏ –Ω–µ–º–∞—î —Å—Ç–æ—Ä—ñ–Ω–æ–∫.")
        page_jump_state.pop(uid, None)
        return

    target = clamp(target, 0, len(pages) - 1)
    user_states.setdefault(uid, {})["page"] = target
    page_jump_state.pop(uid, None)
    show_book_page(message.chat.id, uid)

# === –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–æ–≤ ===
try:
    with open("motivations.json", "r", encoding="utf-8") as f:
        motivation_data = json.load(f)
except Exception as e:
    motivation_data = {"ua": [], "ru": [], "en": []}
    logging.error(f"[LOAD_MOTIVATION_ERROR] {e}")

try:
    with open("coaches_tips.json", "r", encoding="utf-8") as f:
        coaches_data = json.load(f)
except Exception as e:
    coaches_data = {"ua": [], "ru": [], "en": []}
    logging.error(f"[LOAD_COACHES_ERROR] {e}")

@bot.message_handler(commands=['motivation'])
def cmd_motivation(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    phrases = motivation_data.get(lang, [])
    bot.send_message(message.chat.id, random.choice(phrases) if phrases else "–ù–µ–º–∞—î –º–æ—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ç–≤–æ—î—ó –º–æ–≤–∏.")

@bot.message_handler(func=lambda m: m.text and m.text.lower() in [
    "üß† –º–æ—Ç–∏–≤–∞—Ü—ñ—è", "üíñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è", "üß† –º–æ—Ç–∏–≤–∞—Ü–∏—è", "üíñ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "üß† motivation", "üíñ inspiration"
])
def motivation_handler(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    phrases = motivation_data.get(lang, [])
    bot.send_message(message.chat.id, random.choice(phrases) if phrases else "–ù–µ–º–∞—î –º–æ—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ç–≤–æ—î—ó –º–æ–≤–∏.")

@bot.message_handler(func=lambda m: m.text and m.text.lower() in [
    "üéì –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤", "üéì —Å–æ–≤–µ—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "üéì pro trainer tips"
])
def coach_tip_handler(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    tips = coaches_data.get(lang, [])
    if not tips:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–º–∞—î –ø–æ—Ä–∞–¥ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.")
        return
    coach = random.choice(tips)
    name = coach.get("name", "–ë–µ–∑ —ñ–º–µ–Ω—ñ")
    bio = coach.get(f"bio_{lang}", coach.get("bio", ""))
    tip = coach.get(f"tip_{lang}", coach.get("tip", ""))
    text = f"üë§ *{name}*\n\nüß¨ _{bio}_\n\n{tip}"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# === SHARKAN RUN ‚Äî —Ç–∞–π–º–µ—Ä, —Å—Ç–æ–ø, –∏—Å—Ç–æ—Ä–∏—è ===
running_timers = {}
last_bot_messages = {}

def calculate_calories(weight_kg, duration_min):
    MET = 9.8
    return round((MET * 3.5 * weight_kg / 200) * duration_min)

def save_run_result(user_id, duration_min, calories):
    try:
        with open("run_history.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        data = {}
    data.setdefault(user_id, []).append({
        "date": datetime.now().strftime("%Y-%m-%d"),
        "duration_min": duration_min,
        "calories": calories
    })
    with open("run_history.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
    return data[user_id][-3:]

def send_clean_message(chat_id, user_id, text, reply_markup=None):
    mid = last_bot_messages.get(user_id)
    if mid:
        try:
            bot.delete_message(chat_id, mid)
        except Exception:
            pass
    msg = bot.send_message(chat_id, text, reply_markup=reply_markup)
    last_bot_messages[user_id] = msg.message_id
    return msg.message_id

class RunTimer:
    def __init__(self, bot_obj, chat_id, user_id, weight_kg, lang):
        self.bot = bot_obj
        self.chat_id = chat_id
        self.user_id = user_id
        self.weight_kg = weight_kg
        self.lang = lang
        self.start_time = datetime.now()
        self.active = True
        self.message_id = None
        self.thread = threading.Thread(target=self.loop, daemon=True)
        self.thread.start()

    def stop(self):
        self.active = False
        duration = max(1, round((datetime.now() - self.start_time).seconds / 60))
        calories = calculate_calories(self.weight_kg, duration)
        save_run_result(self.user_id, duration, calories)
        # === –ù–∞—á–∏—Å–ª–∏–º SHRK COINS ===
        profile = user_profiles.setdefault(self.user_id, {})
        coins = int(profile.get("coins", 0))
        coins += max(1, duration // 10) * 5  # 5 –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (–º–∏–Ω–∏–º—É–º 5)
        profile["coins"] = coins
        save_profiles()
        return duration, calories, coins

    def loop(self):
        while self.active:
            minutes = (datetime.now() - self.start_time).seconds // 60
            msg_text = {
                "ua": f"üïí –ü—Ä–æ–π—à–ª–æ: {minutes} —Ö–≤",
                "ru": f"üïí –ü—Ä–æ—à–ª–æ: {minutes} –º–∏–Ω",
                "en": f"üïí Elapsed: {minutes} min"
            }.get(self.lang, f"üïí –ü—Ä–æ–π—à–ª–æ: {minutes} —Ö–≤")
            try:
                if self.message_id:
                    self.bot.delete_message(self.chat_id, self.message_id)
                msg = self.bot.send_message(self.chat_id, msg_text)
                self.message_id = msg.message_id
            except Exception:
                pass
            time.sleep(60)

def text_contains_any(text: str, options: list[str]) -> bool:
    return any(opt in text for opt in options)

@bot.message_handler(func=lambda m: (m.text and text_contains_any(m.text, ["üèÅ –ü–æ—á–∞—Ç–∏ –±—ñ–≥", "üèÅ –ù–∞—á–∞—Ç—å –±–µ–≥", "üèÅ Start run"])) or
                                  (m.text and m.text.lower() in ["–ø–æ—á–∞—Ç–∏ –±—ñ–≥", "–Ω–∞—á–∞—Ç—å –±–µ–≥", "start run"]))
def start_run(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    lang = get_lang(user_id)

    weight = 70
    try:
        weight = int(user_profiles.get(user_id, {}).get("weight", 70))
    except Exception:
        pass

    if user_id in running_timers:
        # –µ—Å–ª–∏ —É–∂–µ —à—ë–ª —Ç–∞–π–º–µ—Ä ‚Äî –º—è–≥–∫–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        try:
            running_timers[user_id].stop()
        except Exception:
            pass

    running_timers[user_id] = RunTimer(bot, chat_id, user_id, weight, lang)

    texts = {
        "ua": "üèÉ‚Äç‚ôÇÔ∏è –ë—ñ–∂–∏! –Ø —Ñ—ñ–∫—Å—É—é —Ç–≤—ñ–π —á–∞—Å...\n‚õîÔ∏è –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–≥¬ª, –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à.",
        "ru": "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥–∏! –Ø —Ñ–∏–∫—Å–∏—Ä—É—é —Ç–≤–æ—ë –≤—Ä–µ–º—è...\n‚õîÔ∏è –ù–∞–∂–º–∏ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–≥¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.",
        "en": "üèÉ‚Äç‚ôÇÔ∏è Run! I‚Äôm tracking your time...\n‚õîÔ∏è Tap 'Stop run' when you‚Äôre done."
    }
    send_clean_message(chat_id, user_id, texts.get(lang, texts["ua"]))

@bot.message_handler(func=lambda m: (m.text and text_contains_any(m.text, ["‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–≥", "‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–≥", "‚õîÔ∏è Stop run"])) or
                                  (m.text and m.text.lower() in ["–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–≥", "–∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–≥", "stop run"]))
def stop_run(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    lang = get_lang(user_id)

    if user_id not in running_timers:
        texts = {
            "ua": "‚ùå –ë—ñ–≥ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π.",
            "ru": "‚ùå –ë–µ–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.",
            "en": "‚ùå Run not active."
        }
        send_clean_message(chat_id, user_id, texts.get(lang, texts["ua"]))
        return

    duration, calories, coins = running_timers[user_id].stop()
    del running_timers[user_id]

    unit = {"ua": "—Ö–≤", "ru": "–º–∏–Ω", "en": "min"}[lang if lang in ["ua","ru","en"] else "ua"]
    reward = max(5, (duration // 10) * 5)
    result_text = {
        "ua": f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} {unit}\nüî• –ö–∞–ª–æ—Ä—ñ—ó: {calories} –∫–∫–∞–ª\nü™ô –ú–æ–Ω–µ—Ç–∏: +{reward} (–≤—Å—å–æ–≥–æ: {coins})",
        "ru": f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} {unit}\nüî• –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\nü™ô –ú–æ–Ω–µ—Ç—ã: +{reward} (–≤—Å–µ–≥–æ: {coins})",
        "en": f"‚úÖ Done!\n‚è± Duration: {duration} {unit}\nüî• Calories: {calories} kcal\nü™ô Coins: +{reward} (total: {coins})"
    }
    send_clean_message(chat_id, user_id, result_text.get(lang, result_text["ua"]))

@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["‚è± —Ä–µ–∂–∏–º –±—ñ–≥", "‚è± —Ä–µ–∂–∏–º –±–µ–≥", "‚è± running mode"])
def run_menu(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "ru":
        markup.add("üèÅ –ù–∞—á–∞—Ç—å –±–µ–≥", "‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–≥")
        markup.add("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        text = "üèÉ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è SHARKAN RUN:"
    elif lang == "en":
        markup.add("üèÅ Start run", "‚õîÔ∏è Stop run")
        markup.add("üìä My results", "‚¨ÖÔ∏è Main menu")
        text = "üèÉ‚Äç‚ôÇÔ∏è Choose an action for SHARKAN RUN:"
    else:
        markup.add("üèÅ –ü–æ—á–∞—Ç–∏ –±—ñ–≥", "‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–≥")
        markup.add("üìä –ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        text = "üèÉ‚Äç‚ôÇÔ∏è –û–±–µ—Ä–∏ –¥—ñ—é –¥–ª—è SHARKAN RUN:"

    send_clean_message(message.chat.id, user_id, text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text and any(s in m.text.lower() for s in ["—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "results"]))
def show_run_results(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    lang = get_lang(user_id)
    try:
        with open("run_history.json", "r", encoding="utf-8") as f:
            run_history = json.load(f)
        records = run_history.get(user_id, [])
    except Exception:
        records = []

    if not records:
        no_data = {
            "ua": "‚ùå –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–±—ñ–∂–æ–∫.",
            "ru": "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–∂–µ–∫.",
            "en": "‚ùå No saved runs."
        }
        send_clean_message(chat_id, user_id, no_data.get(lang, no_data["ua"]))
        return

    titles = {
        "ua": "üìä –û—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–±—ñ–∂–∫–∏:",
        "ru": "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏:",
        "en": "üìä Recent runs:"
    }
    unit = {"ua": "—Ö–≤", "ru": "–º–∏–Ω", "en": "min"}[lang if lang in ["ua","ru","en"] else "ua"]

    result = [titles.get(lang, titles["ua"])]
    for run in reversed(records[-3:]):
        result.append(f"üìÖ {run['date']} ‚Äî {run['duration_min']} {unit} ‚Äî {run['calories']} –∫–∫–∞–ª")
    send_clean_message(chat_id, user_id, "\n".join(result))

# === /start, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞/–≥–µ–Ω–¥–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ ===
@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è/–Ω–∏–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞/–ø–æ–¥–ø–∏—Å–µ–π
    profile = user_profiles.setdefault(user_id, {})
    profile["first_name"] = message.from_user.first_name or profile.get("first_name")
    profile["last_name"] = message.from_user.last_name or profile.get("last_name")
    profile["username"] = message.from_user.username or profile.get("username")
    save_profiles()

    markup = types.InlineKeyboardMarkup()
    for code, name in LANGUAGES.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    bot.send_message(message.chat.id, "üëã –û–±–µ—Ä–∏ –º–æ–≤—É / Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    chat_id = call.message.chat.id
    user_id = str(call.from_user.id)
    lang = call.data.split("_", 1)[1]

    profile = user_profiles.setdefault(user_id, {})
    profile["language"] = lang
    user_lang[user_id] = lang
    save_profiles()

    if lang == "ua":
        text = "‚úÖ –¢–≤–æ—è –º–æ–≤–∞ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞. –í—ñ—Ç–∞—î–º–æ –≤ SHARKAN BOT!\n\nüë§ –û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–Ø ‚Äî —á–æ–ª–æ–≤—ñ–∫", callback_data="gender_male"),
            types.InlineKeyboardButton("–Ø ‚Äî –∂—ñ–Ω–∫–∞", callback_data="gender_female")
        )
    elif lang == "ru":
        text = "‚úÖ –í–∞—à —è–∑—ã–∫ ‚Äî —Ä—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SHARKAN BOT!\n\nüë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–Ø ‚Äî –º—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
            types.InlineKeyboardButton("–Ø ‚Äî –∂–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")
        )
    else:
        text = "‚úÖ Your language is English. Welcome to SHARKAN BOT!\n\nüë§ Select your gender:"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("I am a man", callback_data="gender_male"),
            types.InlineKeyboardButton("I am a woman", callback_data="gender_female")
        )

    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("gender_"))
def handle_gender(call):
    chat_id = call.message.chat.id
    user_id = str(call.from_user.id)
    gender = call.data.split("_", 1)[1]  # male / female

    profile = user_profiles.setdefault(user_id, {})
    profile["gender"] = gender
    save_profiles()

    lang = get_lang(user_id)
    confirm = {
        "ua": "‚úÖ –°—Ç–∞—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "ru": "‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "en": "‚úÖ Gender saved."
    }
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id)
    bot.send_message(chat_id, confirm.get(lang, "‚úÖ Done."))
    menu_from_id(chat_id, user_id)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===
def menu_from_id(chat_id, user_id):
    lang = get_lang(user_id)
    gender = user_profiles.get(user_id, {}).get("gender", "male")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if lang == "ua":
        buttons = [
            "üî• –ú—ñ–π –ø–ª–∞–Ω" if gender == "female" else "üî• –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ",
            "üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
            "üíñ –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è" if gender == "female" else "üß† –ú–æ—Ç–∏–≤–∞—Ü—ñ—è",
            "‚è± –†–µ–∂–∏–º –ë–Ü–ì",
            "ü•∑ –ë—ñ–π –∑ –¢—ñ–Ω–Ω—é",
            "üìö –ö–Ω–∏–≥–∏ SHARKAN",
            "üéì –ü–æ—Ä–∞–¥–∏ –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤",
            "ü§ñ AI SHARKAN",
            "üåü –í–∏–∫–ª–∏–∫" if gender == "female" else "ü•á –í–∏–∫–ª–∏–∫",
            "üíé SHRK COINS" if gender == "female" else "ü™ô SHRK COINS",
            "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å" if gender == "female" else "üìä –ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
            "üìà –ü—Ä–æ–≥—Ä–µ—Å / –†–∞–Ω–≥–∏" if gender == "female" else "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN",
            "üéµ –ú—É–∑–∏–∫–∞",
            "üëë –ú—ñ–π —à–ª—è—Ö" if gender == "female" else "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
            "üõç –ú–∞–≥–∞–∑–∏–Ω",
            "üí¨ –ß–∞—Ç SHARKAN",
            "üì¢ –ö–∞–Ω–∞–ª SHARKAN",
            "üßò‚Äç‚ôÄÔ∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è" if gender == "female" else "üßò –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è",
            "üîí –¢–µ–º–Ω–∞ –ó–æ–Ω–∞",
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "‚ùì FAQ / –ü—ñ–¥—Ç—Ä–∏–º–∫–∞" if gender == "female" else "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / FAQ",
            "üì® –°–ø—ñ–≤–ø—Ä–∞—Ü—è"
        ]
    elif lang == "ru":
        buttons = [
            "üî• –ú–æ–π –ø–ª–∞–Ω" if gender == "female" else "üî• –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
            "üíñ –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ" if gender == "female" else "üß† –ú–æ—Ç–∏–≤–∞—Ü–∏—è",
            "‚è± –†–µ–∂–∏–º –ë–ï–ì",
            "ü•∑ –ë–æ–π —Å –¢–µ–Ω—å—é",
            "üìö –ö–Ω–∏–≥–∏ SHARKAN",
            "üéì –°–æ–≤–µ—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
            "ü§ñ AI SHARKAN",
            "üåü –í—ã–∑–æ–≤" if gender == "female" else "ü•á –í—ã–∑–æ–≤",
            "üíé SHRK COINS" if gender == "female" else "ü™ô SHRK COINS",
            "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å" if gender == "female" else "üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å / –†–∞–Ω–≥–∏" if gender == "female" else "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN",
            "üéµ –ú—É–∑—ã–∫–∞",
            "üëë –ú–æ–π –ø—É—Ç—å" if gender == "female" else "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
            "üõç –ú–∞–≥–∞–∑–∏–Ω",
            "üí¨ –ß–∞—Ç SHARKAN",
            "üì¢ –ö–∞–Ω–∞–ª SHARKAN",
            "üßò‚Äç‚ôÄÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" if gender == "female" else "üßò –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
            "üîí –¢—ë–º–Ω–∞—è –ó–æ–Ω–∞",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "‚ùì FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if gender == "female" else "‚ùì –ü–æ–º–æ—â—å / FAQ",
            "üì® –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"
        ]
    else:
        buttons = [
            "üî• My Plan" if gender == "female" else "üî• Today's Plan",
            "üèãÔ∏è Workout",
            "üíñ Inspiration" if gender == "female" else "üß† Motivation",
            "‚è± Running Mode",
            "ü•∑ Shadow Fight",
            "üìö SHARKAN Books",
            "üéì Pro Trainer Tips",
            "ü§ñ AI SHARKAN",
            "üåü Challenge" if gender == "female" else "ü•á Challenge",
            "üíé SHRK COINS" if gender == "female" else "ü™ô SHRK COINS",
            "üìä My Progress" if gender == "female" else "üìä My Results",
            "üìà Progress / Ranks" if gender == "female" else "üìà Statistics",
            "üèÜ SHARKAN Ranking",
            "üéµ Music",
            "üëë My Path" if gender == "female" else "üë§ My Profile",
            "üõç Shop",
            "üí¨ SHARKAN Chat",
            "üì¢ SHARKAN Channel",
            "üßò‚Äç‚ôÄÔ∏è Recovery" if gender == "female" else "üßò Recovery",
            "üîí Dark Zone",
            "‚öôÔ∏è Settings",
            "‚ùì Help / FAQ",
            "üì® Contact Us"
        ]

    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i:i+2])

    bot.send_message(
        chat_id,
        "üß† –û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª:" if lang == "ua" else "üß† –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:" if lang == "ru" else "üß† Choose a section:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower() in ["‚¨ÖÔ∏è –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è main menu"])
def back_to_main_menu(message):
    user_id = str(message.from_user.id)
    menu_from_id(message.chat.id, user_id)

# === –ü—Ä–æ—Ñ–∏–ª—å: –≤–µ—Å/—Ä–æ—Å—Ç/—Ü–µ–ª—å ===
profile_wizard = {}  # user_id -> {"step": ..., "tmp": {...}}

def start_profile(chat_id, user_id):
    lang = get_lang(user_id)
    profile_wizard[user_id] = {"step": "weight", "tmp": {}}
    prompt = {
        "ua": "‚öñÔ∏è –í–∫–∞–∂–∏ —Å–≤–æ—é –≤–∞–≥—É (–∫–≥), –Ω–∞–ø—Ä.: 75",
        "ru": "‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å (–∫–≥), –Ω–∞–ø—Ä.: 75",
        "en": "‚öñÔ∏è Enter your weight (kg), e.g. 75"
    }
    bot.send_message(chat_id, prompt.get(lang, prompt["ua"]))

@bot.message_handler(func=lambda m: m.text and m.text in [
    "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å","üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å","üë§ My Profile","üëë –ú—ñ–π —à–ª—è—Ö","üëë –ú–æ–π –ø—É—Ç—å","üëë My Path"
])
def on_profile_button(message):
    user_id = str(message.from_user.id)
    profile = user_profiles.get(user_id, {})
    lang = get_lang(user_id)
    if not profile.get("weight") or not profile.get("height") or not profile.get("goal"):
        start_profile(message.chat.id, user_id)
        return

    txt = {
        "ua": f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å:\n–í–∞–≥–∞: {profile.get('weight','?')} –∫–≥\n–ó—Ä—ñ—Å—Ç: {profile.get('height','?')} —Å–º\n–¶—ñ–ª—å: {profile.get('goal','?')}\n–ú–æ–Ω–µ—Ç–∏: {profile.get('coins',0)}",
        "ru": f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n–í–µ—Å: {profile.get('weight','?')} –∫–≥\n–†–æ—Å—Ç: {profile.get('height','?')} —Å–º\n–¶–µ–ª—å: {profile.get('goal','?')}\n–ú–æ–Ω–µ—Ç—ã: {profile.get('coins',0)}",
        "en": f"üë§ Profile:\nWeight: {profile.get('weight','?')} kg\nHeight: {profile.get('height','?')} cm\nGoal: {profile.get('goal','?')}\nCoins: {profile.get('coins',0)}",
    }
    bot.send_message(message.chat.id, txt.get(lang, txt["ua"]))

@bot.message_handler(func=lambda m: str(m.from_user.id) in profile_wizard)
def profile_flow(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    data = profile_wizard[user_id]
    step = data["step"]
    value = (message.text or "").strip()

    def ask_height():
        data["step"] = "height"
        q = {
            "ua":"üìè –¢–µ–ø–µ—Ä –∑—Ä—ñ—Å—Ç (—Å–º), –Ω–∞–ø—Ä.: 180",
            "ru":"üìè –¢–µ–ø–µ—Ä—å —Ä–æ—Å—Ç (—Å–º), –Ω–∞–ø—Ä.: 180",
            "en":"üìè Now height (cm), e.g. 180"
        }
        bot.send_message(message.chat.id, q.get(lang,q["ua"]))

    def ask_goal():
        data["step"] = "goal"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if lang == "ru":
            kb.add("–ü–æ—Ö—É–¥–µ—Ç—å","–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É")
            kb.add("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É")
        elif lang == "en":
            kb.add("Lose weight","Gain muscle")
            kb.add("Maintain")
        else:
            kb.add("–°—Ö—É–¥–Ω—É—Ç–∏","–ù–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É")
            kb.add("–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É")
        bot.send_message(message.chat.id, {
            "ua":"üéØ –û–±–µ—Ä–∏ —Ü—ñ–ª—å:",
            "ru":"üéØ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:",
            "en":"üéØ Choose your goal:"
        }.get(lang,"üéØ –û–±–µ—Ä–∏ —Ü—ñ–ª—å:"), reply_markup=kb)

    if step == "weight":
        if not value.isdigit() or not (30 <= int(value) <= 300):
            bot.send_message(message.chat.id, {"ua":"–í–≤–µ–¥–∏ —á–∏—Å–ª–æ 30‚Äì300.","ru":"–í–≤–µ–¥–∏ —á–∏—Å–ª–æ 30‚Äì300.","en":"Enter 30‚Äì300."}[lang])
            return
        data["tmp"]["weight"] = int(value)
        ask_height()
        return

    if step == "height":
        if not value.isdigit() or not (120 <= int(value) <= 250):
            bot.send_message(message.chat.id, {"ua":"–í–≤–µ–¥–∏ —á–∏—Å–ª–æ 120‚Äì250.","ru":"–í–≤–µ–¥–∏ —á–∏—Å–ª–æ 120‚Äì250.","en":"Enter 120‚Äì250."}[lang])
            return
        data["tmp"]["height"] = int(value)
        ask_goal()
        return

    if step == "goal":
        goals_map = {
            "ua": {"—Å—Ö—É–¥–Ω—É—Ç–∏":"lose", "–Ω–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É":"gain", "–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É":"maintain"},
            "ru": {"–ø–æ—Ö—É–¥–µ—Ç—å":"lose", "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É":"gain", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É":"maintain"},
            "en": {"lose weight":"lose", "gain muscle":"gain", "maintain":"maintain"},
        }
        key = value.lower()
        goal_code = None
        for gk, gm in goals_map.items():
            if gk == lang and key in gm:
                goal_code = gm[key]
        if not goal_code:
            bot.send_message(message.chat.id, {"ua":"–û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –∫–Ω–æ–ø–æ–∫.","ru":"–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫.","en":"Choose from buttons."}[lang])
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        prof = user_profiles.setdefault(user_id, {})
        prof.update(data["tmp"])
        prof["goal"] = goal_code
        prof.setdefault("coins", 0)
        save_profiles()
        profile_wizard.pop(user_id, None)

        done = {"ua":"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.","ru":"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.","en":"‚úÖ Profile saved."}[lang]
        bot.send_message(message.chat.id, done, reply_markup=types.ReplyKeyboardRemove())
        menu_from_id(message.chat.id, user_id)
        return

# === –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ / –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ===
@bot.message_handler(func=lambda m: m.text and m.text in [
    "üî• –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ","üî• –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è","üî• Today's Plan","üî• –ú—ñ–π –ø–ª–∞–Ω","üî• –ú–æ–π –ø–ª–∞–Ω","üî• My Plan"
])
def plan_today(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    prof = user_profiles.get(user_id, {})
    weight = int(prof.get("weight", 70))
    goal = prof.get("goal", "maintain")

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
    if goal == "lose":
        workout = [
            "1) –ë–µ—Ä–ø—ñ ‚Äî 3√ó12 (–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 60—Å)",
            "2) –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞ ‚Äî 4√ó15 (45—Å)",
            "3) –ü–ª–∞–Ω–∫–∞ ‚Äî 3√ó45—Å (30—Å)",
            "4) –í–∏–ø–∞–¥–∏ ‚Äî 3√ó12/–Ω–æ–≥–∞ (60—Å)",
            "5) –°–∫–∞–∫–∞–ª–∫–∞/–∫–∞—Ä–¥—ñ–æ ‚Äî 10 —Ö–≤ –ø–æ–º—ñ—Ä–Ω–æ"
        ]
        kcal_target = max(500, 6 * weight)
        meals = [
            "–°–Ω—ñ–¥–∞–Ω–æ–∫: –π–æ–≥—É—Ä—Ç + —è–≥–æ–¥–∏ + –∂–º–µ–Ω—è –≥–æ—Ä—ñ—Ö—ñ–≤",
            "–û–±—ñ–¥: –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ –Ω–∞ –ø–∞—Ä—ñ + –æ–≤–æ—á—ñ",
            "–í–µ—á–µ—Ä—è: —Ä–∏–±–∞/—Ç—É–Ω–µ—Ü—å + —Å–∞–ª–∞—Ç",
            "–ü–µ—Ä–µ–∫—É—Å: —è–±–ª—É–∫–æ/–º–æ—Ä–∫–≤–∞"
        ]
    elif goal == "gain":
        workout = [
            "1) –í—ñ–¥–∂–∏–º–∞–Ω–Ω—è ‚Äî 5√ó10-15 (90—Å)",
            "2) –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è ‚Äî 5√ó12 (90—Å)",
            "3) –¢—è–≥–∞ –≤ –Ω–∞—Ö–∏–ª—ñ (–µ–ª–∞—Å—Ç–∏–∫/–≥–∞–Ω—Ç–µ–ª—ñ) ‚Äî 4√ó12 (90—Å)",
            "4) –ñ–∏–º –Ω–∞–¥ –≥–æ–ª–æ–≤–æ—é (–≥–∞–Ω—Ç–µ–ª—ñ/–µ–ª–∞—Å—Ç–∏–∫) ‚Äî 4√ó10 (90—Å)",
            "5) –ü—Ä–µ—Å: —Å–∫—Ä—É—á—É–≤–∞–Ω–Ω—è ‚Äî 3√ó15 (60—Å)"
        ]
        kcal_target = max(2600, 30 * weight)
        meals = [
            "–°–Ω—ñ–¥–∞–Ω–æ–∫: –≤—ñ–≤—Å—è–Ω–∫–∞ + –±–∞–Ω–∞–Ω + –∞—Ä–∞—Ö—ñ—Å–æ–≤–∞ –ø–∞—Å—Ç–∞",
            "–û–±—ñ–¥: —Ä–∏—Å + –∫—É—Ä–∫–∞/—è–ª–æ–≤–∏—á–∏–Ω–∞ + –æ–≤–æ—á—ñ",
            "–ü–µ—Ä–µ–∫—É—Å: —Ç–≤–æ—Ä–æ–≥/–π–æ–≥—É—Ä—Ç + –≥–æ—Ä—ñ—Ö–∏",
            "–í–µ—á–µ—Ä—è: –ø–∞—Å—Ç–∞/–∫–∞—Ä—Ç–æ–ø–ª—è + —Ä–∏–±–∞/–º'—è—Å–æ + —Å–∞–ª–∞—Ç"
        ]
    else:
        workout = [
            "1) –õ–µ–≥–∫–∞ –ø—Ä–æ–±—ñ–∂–∫–∞ ‚Äî 20 —Ö–≤",
            "2) –í—ñ–¥–∂–∏–º–∞–Ω–Ω—è ‚Äî 3√ó12 (60—Å)",
            "3) –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è ‚Äî 3√ó15 (60—Å)",
            "4) –ü–ª–∞–Ω–∫–∞ ‚Äî 3√ó40—Å (30—Å)",
            "5) –†–æ–∑—Ç—è–∂–∫–∞ ‚Äî 10 —Ö–≤"
        ]
        kcal_target = max(2000, 22 * weight)
        meals = [
            "–°–Ω—ñ–¥–∞–Ω–æ–∫: –æ–º–ª–µ—Ç + –æ–≤–æ—á—ñ",
            "–û–±—ñ–¥: –≥—Ä–µ—á–∫–∞ + —ñ–Ω–¥–∏—á–∫–∞/–∫—É—Ä–∫–∞ + —Å–∞–ª–∞—Ç",
            "–ü–µ—Ä–µ–∫—É—Å: —Ñ—Ä—É–∫—Ç–∏/–≥–æ—Ä—ñ—Ö–∏",
            "–í–µ—á–µ—Ä—è: —Ä–∏–±–∞/–æ–≤–æ—á—ñ/—Å–∞–ª–∞—Ç"
        ]

    water = f"–í–æ–¥–∞: {round(weight*0.03,1)} –ª/–¥–µ–Ω—å"
    supps = "–î–æ–±–∞–≤–∫–∏: –≤—ñ—Ç–∞–º—ñ–Ω D, –æ–º–µ–≥–∞-3, –µ–ª–µ–∫—Ç—Ä–æ–ª—ñ—Ç–∏ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)."

    text_map = {
        "ua": f"üóì <b>–ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ</b>\n\n<b>–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</b>:\n" + "\n".join(workout) +
              f"\n\n<b>–•–∞—Ä—á—É–≤–∞–Ω–Ω—è</b>:\n- " + "\n- ".join(meals) +
              f"\n\n<b>–ö–∞–ª–æ—Ä—ñ—ó (–æ—Ä—ñ—î–Ω—Ç–∏—Ä)</b>: ~{kcal_target} –∫–∫–∞–ª\n{water}\n{supps}",
        "ru": f"üóì <b>–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</b>:\n" + "\n".join(workout) +
              f"\n\n<b>–ü–∏—Ç–∞–Ω–∏–µ</b>:\n- " + "\n- ".join(meals) +
              f"\n\n<b>–ö–∞–ª–æ—Ä–∏–∏ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä)</b>: ~{kcal_target} –∫–∫–∞–ª\n–í–æ–¥–∞: {round(weight*0.03,1)} –ª/–¥–µ–Ω—å\n–î–æ–±–∞–≤–∫–∏: –≤–∏—Ç–∞–º–∏–Ω D, –æ–º–µ–≥–∞-3, —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã.",
        "en": f"üóì <b>Plan for today</b>\n\n<b>Workout</b>:\n" + "\n".join(workout) +
              f"\n\n<b>Nutrition</b>:\n- " + "\n- ".join(meals) +
              f"\n\n<b>Calories (target)</b>: ~{kcal_target} kcal\nWater: {round(weight*0.03,1)} L/day\nSupplements: vitamin D, omega-3, electrolytes."
    }
    bot.send_message(message.chat.id, text_map.get(lang, text_map["ua"]), parse_mode="HTML")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / Progress ===
def compute_streak(records):
    if not records:
        return 0
    dates = sorted({r["date"] for r in records}, reverse=True)
    today = datetime.now().date()
    streak = 0
    cur = today
    dates_set = set(datetime.strptime(d, "%Y-%m-%d").date() for d in dates)
    while cur in dates_set:
        streak += 1
        cur = cur - timedelta(days=1)
    return streak

@bot.message_handler(func=lambda m: m.text and m.text in ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","üìà –ü—Ä–æ–≥—Ä–µ—Å / –†–∞–Ω–≥–∏","üìà Statistics","üìà Progress / Ranks"])
def show_stats(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    try:
        with open("run_history.json","r",encoding="utf-8") as f:
            data = json.load(f)
        recs = data.get(user_id, [])
    except Exception:
        recs = []

    total_runs = len(recs)
    total_min = sum(r.get("duration_min",0) for r in recs)
    total_kcal = sum(r.get("calories",0) for r in recs)
    streak = compute_streak(recs)

    txt = {
        "ua": f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n–ü—Ä–æ–±—ñ–∂–æ–∫: {total_runs}\n–•–≤–∏–ª–∏–Ω: {total_min}\n–ö–∞–ª–æ—Ä—ñ–π: {total_kcal}\n–°—Ç—Ä—ñ–∫: {streak} –¥–Ω.",
        "ru": f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n–ü—Ä–æ–±–µ–∂–µ–∫: {total_runs}\n–ú–∏–Ω—É—Ç: {total_min}\n–ö–∞–ª–æ—Ä–∏–π: {total_kcal}\n–°—Ç–∏–∫: {streak} –¥–Ω.",
        "en": f"üìà <b>Statistics</b>\nRuns: {total_runs}\nMinutes: {total_min}\nCalories: {total_kcal}\nStreak: {streak} days"
    }
    bot.send_message(message.chat.id, txt.get(lang, txt["ua"]), parse_mode="HTML")

# === SHRK COINS ===
@bot.message_handler(func=lambda m: m.text and m.text in ["ü™ô SHRK COINS","üíé SHRK COINS"])
def coins_handler(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    coins = int(user_profiles.get(user_id, {}).get("coins", 0))
    txt = {
        "ua": f"ü™ô –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å SHRK COINS: <b>{coins}</b>",
        "ru": f"ü™ô –¢–≤–æ–π –±–∞–ª–∞–Ω—Å SHRK COINS: <b>{coins}</b>",
        "en": f"ü™ô Your SHRK COINS balance: <b>{coins}</b>"
    }
    bot.send_message(message.chat.id, txt.get(lang, txt["ua"]), parse_mode="HTML")

# === SHOP (–∏–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏ –∑–∞ –º–æ–Ω–µ—Ç—ã) ===
SHOP_ITEMS = [
    {"id": "badge_gold", "title": "–ó–æ–ª–æ—Ç–∏–π –±–µ–π–¥–∂ / –ó–æ–ª–æ—Ç–æ–π –±–µ–π–¥–∂ / Gold Badge", "price": 50},
    {"id": "theme_dark", "title": "–¢–µ–º–Ω–∞ —Ç–µ–º–∞ / –¢—ë–º–Ω–∞—è —Ç–µ–º–∞ / Dark Theme", "price": 30},
    {"id": "sound_pack", "title": "–ü–∞–∫–µ—Ç –∑–≤—É–∫—ñ–≤ / –ü–∞–∫–µ—Ç –∑–≤—É–∫–æ–≤ / Sound Pack", "price": 20},
]

def get_inventory(uid: str):
    return user_profiles.setdefault(uid, {}).setdefault("inventory", [])

@bot.message_handler(func=lambda m: m.text and m.text in ["üõç –ú–∞–≥–∞–∑–∏–Ω","üõç Shop"])
def shop_handler(message):
    uid = str(message.from_user.id)
    coins = int(user_profiles.setdefault(uid, {}).get("coins", 0))

    markup = types.InlineKeyboardMarkup()
    for item in SHOP_ITEMS:
        markup.add(types.InlineKeyboardButton(
            f"{item['title']} ‚Äî {item['price']} ü™ô",
            callback_data=f"buy_{item['id']}"
        ))

    lang = get_lang(uid)
    caption = {
        "ua": f"üõç –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {coins} ü™ô\n–û–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        "ru": f"üõç –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {coins} ü™ô\n–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        "en": f"üõç Your balance: {coins} ü™ô\nPick an item:"
    }[lang if lang in ["ua","ru","en"] else "ua"]

    bot.send_message(message.chat.id, caption, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def buy_item(call):
    uid = str(call.from_user.id)
    item_id = call.data.replace("buy_", "", 1)
    profile = user_profiles.setdefault(uid, {})
    coins = int(profile.get("coins", 0))

    item = next((x for x in SHOP_ITEMS if x["id"] == item_id), None)
    if not item:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if coins < item["price"]:
        bot.answer_callback_query(call.id, "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã, –∫–ª–∞–¥—ë–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    profile["coins"] = coins - item["price"]
    inv = get_inventory(uid)
    if item_id not in inv:
        inv.append(item_id)
    save_profiles()

    bot.answer_callback_query(call.id, "‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
    bot.send_message(call.message.chat.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['title']}\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: {profile['coins']} ü™ô")

# === –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (—Ç–æ–ø-10 –ø–æ –º–∏–Ω—É—Ç–∞–º) ===
@bot.message_handler(func=lambda m: m.text and m.text in ["üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN","üèÜ SHARKAN Ranking"])
def leaderboard_handler(message):
    # —á–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–±–µ–∂–µ–∫
    try:
        with open("run_history.json", "r", encoding="utf-8") as f:
            rh = json.load(f)
    except Exception:
        rh = {}

    # —Å–æ–±–∏—Ä–∞–µ–º —Å—É–º–º—É –º–∏–Ω—É—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    totals = []
    for uid, recs in rh.items():
        total_min = sum(r.get("duration_min", 0) for r in recs)
        totals.append((uid, total_min))

    totals.sort(key=lambda x: x[1], reverse=True)
    top = totals[:10]

    lines = ["üèÜ –¢–æ–ø-10 –∑–∞ –º–∏–Ω—É—Ç–∞–º–∏ –±–µ–≥–∞:"]
    if not top:
        lines.append("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ë–µ–≥–∏ –ø–µ—Ä–≤—ã–º! üèÉ")
    else:
        for idx, (uid, mins) in enumerate(top, 1):
            p = user_profiles.get(uid, {})
            name = p.get("first_name") or p.get("username") or f"ID {uid}"
            lines.append(f"{idx}. {name} ‚Äî {mins} –º–∏–Ω")

    bot.send_message(message.chat.id, "\n".join(lines))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
@bot.message_handler(func=lambda m: m.text and m.text in ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏","‚öôÔ∏è Settings"])
def settings_menu(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "ru":
        kb.add("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫","üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        kb.add("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        txt = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    elif lang == "en":
        kb.add("üåê Change language","üßπ Reset profile")
        kb.add("‚¨ÖÔ∏è Main menu")
        txt = "‚öôÔ∏è Settings"
    else:
        kb.add("üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É","üßπ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")
        kb.add("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        txt = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
    bot.send_message(message.chat.id, txt, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text and m.text in ["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫","üåê Change language","üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É"])
def settings_change_lang(message):
    markup = types.InlineKeyboardMarkup()
    for code, name in LANGUAGES.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    bot.send_message(message.chat.id, "üåê –û–±–µ—Ä–∏ –º–æ–≤—É / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text and m.text in ["üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å","üßπ Reset profile","üßπ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"])
def reset_profile(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    user_profiles[user_id] = {"language": lang, "coins": 0}
    save_profiles()
    bot.send_message(message.chat.id, {"ua":"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å–∫–∏–Ω—É—Ç–æ.","ru":"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω.","en":"‚úÖ Profile reset."}[lang])
    menu_from_id(message.chat.id, user_id)

# === –ë—ç–∫–∞–ø / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ===
@bot.message_handler(commands=["backup"])
def backup_cmd(message):
    payload = {}
    for fn in ["user_profiles.json", "run_history.json", "books_ua.json", "motivations.json", "coaches_tips.json"]:
        try:
            with open(fn, "r", encoding="utf-8") as f:
                payload[fn] = json.load(f)
        except Exception:
            payload[fn] = {}
    fname = f"backup_{int(time.time())}.json"
    with open(fname, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)
    bot.send_document(message.chat.id, open(fname, "rb"), caption="üíæ –ë—ç–∫–∞–ø –≥–æ—Ç–æ–≤.")

@bot.message_handler(commands=["restore"])
def restore_cmd(message):
    lang = get_lang(str(message.from_user.id))
    txt = {
        "ua": "üì• –ù–∞–¥—ñ—à–ª–∏ JSON-—Ñ–∞–π–ª –±–µ–∫–∞–ø—É (—è–∫–∏–π —è —Å—Ç–≤–æ—Ä—é–≤–∞–≤ /backup). –Ø –π–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª—é.",
        "ru": "üì• –ü—Ä–∏—à–ª–∏ JSON-—Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ (–∫–æ—Ç–æ—Ä—ã–π —è —Å–æ–∑–¥–∞–≤–∞–ª /backup). –Ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∏–∑ –Ω–µ–≥–æ.",
        "en": "üì• Send the JSON backup file (made by /backup). I will restore from it."
    }[lang if lang in ["ua","ru","en"] else "ua"]
    bot.send_message(message.chat.id, txt)

@bot.message_handler(content_types=["document"])
def restore_on_doc(message):
    doc = message.document
    if not doc or not doc.file_name.endswith(".json"):
        return
    try:
        fi = bot.get_file(doc.file_id)
        data = bot.download_file(fi.file_path)
        payload = json.loads(data.decode("utf-8"))

        for fn in ["user_profiles.json", "run_history.json", "books_ua.json", "motivations.json", "coaches_tips.json"]:
            if fn in payload:
                with open(fn, "w", encoding="utf-8") as f:
                    json.dump(payload[fn], f, ensure_ascii=False, indent=2)

        # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
        global user_profiles, all_books, motivation_data, coaches_data, user_lang
        with open("user_profiles.json", "r", encoding="utf-8") as f:
            user_profiles = json.load(f)
        with open("books_ua.json", "r", encoding="utf-8") as f:
            all_books = json.load(f)
        with open("motivations.json", "r", encoding="utf-8") as f:
            motivation_data = json.load(f)
        with open("coaches_tips.json", "r", encoding="utf-8") as f:
            coaches_data = json.load(f)

        # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º user_lang –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
        user_lang = {}
        for uid, profile in user_profiles.items():
            if "language" in profile:
                user_lang[uid] = profile["language"]

        bot.send_message(message.chat.id, "‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞/–û—à–∏–±–∫–∞: {e}")

# === –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ ===
@bot.message_handler(func=lambda m: m.text and m.text in ["ü•∑ –ë—ñ–π –∑ –¢—ñ–Ω–Ω—é","ü•∑ –ë–æ–π —Å –¢–µ–Ω—å—é","ü•∑ Shadow Fight"])
def shadow_fight(message):
    lang = get_lang(str(message.from_user.id))
    txt = {
        "ua":"ü•∑ –†–æ–∑–¥—ñ–ª –≥–æ—Ç—É—î—Ç—å—Å—è. –•–æ—á–µ—à —Ç–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥—ñ–≤ 3√ó1 —Ö–≤ –∑ –æ–∑–≤—É—á–∫–æ—é ‚Äî —Å–∫–∞–∂–∏, –¥–æ–¥–∞–º.",
        "ru":"ü•∑ –†–∞–∑–¥–µ–ª –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ. –•–æ—á–µ—à—å —Ç–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–æ–≤ 3√ó1 –º–∏–Ω —Å –æ–∑–≤—É—á–∫–æ–π ‚Äî —Å–∫–∞–∂–∏, –¥–æ–±–∞–≤–ª—é.",
        "en":"ü•∑ Coming soon. Want a 3√ó1 min round timer with voice cues? Say the word."
    }
    bot.send_message(message.chat.id, txt.get(lang, txt["ua"]))

@bot.message_handler(func=lambda m: m.text and m.text in ["üéµ –ú—É–∑–∏–∫–∞","üéµ –ú—É–∑—ã–∫–∞","üéµ Music"])
def music_section(message):
    lang = get_lang(str(message.from_user.id))
    txt = {
        "ua":"üéµ –î–æ–¥–∞–º –ø–ª–µ–π–ª–∏—Å—Ç–∏ (–æ–ª–¥—Å–∫—É–ª/—Ç–µ—Ö–Ω–æ/—Ä–µ–ø) —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –ü–æ—Ç—Ä—ñ–±–Ω—ñ MP3 ‚Äî —Å–∫–∏–Ω—É —Ñ–æ—Ä–º–∞—Ç–∏.",
        "ru":"üéµ –î–æ–±–∞–≤–ª—é –ø–ª–µ–π–ª–∏—Å—Ç—ã (–æ–ª–¥—Å–∫—É–ª/—Ç–µ—Ö–Ω–æ/—Ä—ç–ø) –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù—É–∂–Ω—ã MP3 ‚Äî –ø–æ–¥—Å–∫–∞–∂—É —Ñ–æ—Ä–º–∞—Ç—ã.",
        "en":"üéµ I‚Äôll add playlists (old-school/techno/rap) and updates. Provide MP3s and I‚Äôll wire them in."
    }
    bot.send_message(message.chat.id, txt.get(lang, txt["ua"]))

# === –°—Ç–∞—Ä—Ç ===
print(f"{VERSION} –∑–∞–ø—É—â–µ–Ω–æ.")
bot.infinity_polling(skip_pending=True)

import os
import json
import logging
import random
from datetime import datetime
from telebot import TeleBot, types

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π ===
try:
    with open("motivations.json", "r", encoding="utf-8") as f:
        motivation_data = json.load(f)
except Exception as e:
    motivation_data = {"ua": [], "ru": [], "en": []}
    logging.error(f"[LOAD_MOTIVATION_ERROR] {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ ===
try:
    with open("coaches_tips.json", "r", encoding="utf-8") as f:
        coaches_data = json.load(f)
except Exception as e:
    coaches_data = {"ua": [], "ru": [], "en": []}
    logging.error(f"[LOAD_COACHES_ERROR] {e}")
    
# === –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

bot = TeleBot(BOT_TOKEN)
ADMIN_ID = 693609628
VERSION = "SHARKAN BOT v1.0 ‚Äî MULTILANG + GENDER"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    filemode="a",
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s"
)

# === –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
USER_PROFILE_FILE = "user_profiles.json"
if os.path.exists(USER_PROFILE_FILE):
    with open(USER_PROFILE_FILE, "r") as f:
        user_profiles = json.load(f)
else:
    user_profiles = {}

def save_profiles():
    try:
        with open(USER_PROFILE_FILE, "w") as f:
            json.dump(user_profiles, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logging.error(f"[SAVE_PROFILE_ERROR] {e}")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±—ñ–∂–æ–∫ —Ç–∞ –º–æ–Ω–µ—Ç–∏ ===
run_stats_file = "run_stats.json"
if os.path.exists(run_stats_file):
    with open(run_stats_file, "r") as f:
        run_stats = json.load(f)
else:
    run_stats = {}

active_runs = {}

def save_all():
    save_profiles()
    with open(run_stats_file, "w") as f:
        json.dump(run_stats, f, indent=4, ensure_ascii=False)

# === –Ø–∑—ã–∫–∏ ===
LANGUAGES = {'ua': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}
user_lang = {}

# === –ü–æ–¥–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
for user_id, profile in user_profiles.items():
    if "language" in profile:
        user_lang[user_id] = profile["language"]

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    for code, name in LANGUAGES.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    bot.send_message(message.chat.id, "üëã –û–±–µ—Ä–∏ –º–æ–≤—É / Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

# === –†–µ–∂–∏–º –ë–Ü–ì SHARKAN –∑ —Ç–∞–π–º–µ—Ä–æ–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ç–∞ –º–æ–≤–∞–º–∏ ===

from datetime import datetime
import json
import os
from telebot import types

running_sessions = {}
RUN_HISTORY_FILE = "run_history.json"

# === –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π ===
def calculate_calories(weight_kg, duration_min):
    MET_running = 9.8
    calories = (MET_running * 3.5 * weight_kg / 200) * duration_min
    return round(calories)

# === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ===
def save_run_result(user_id, duration_min, calories):
    try:
        if os.path.exists(RUN_HISTORY_FILE):
            with open(RUN_HISTORY_FILE, "r") as f:
                run_history = json.load(f)
        else:
            run_history = {}
    except:
        run_history = {}

    if user_id not in run_history:
        run_history[user_id] = []

    run_history[user_id].append({
        "date": datetime.now().strftime("%d.%m.%Y"),
        "duration_min": duration_min,
        "calories": calories
    })

    with open(RUN_HISTORY_FILE, "w") as f:
        json.dump(run_history, f, indent=4, ensure_ascii=False)

    return run_history[user_id][-3:]

# === –í–∏—Ç—è–≥ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
def get_lang(user_id):
    try:
        with open("user_profiles.json", "r") as f:
            profiles = json.load(f)
        return profiles.get(str(user_id), {}).get("lang", "ua")
    except:
        return "ua"

@bot.message_handler(func=lambda msg: msg.text.lower() in ["‚è± —Ä–µ–∂–∏–º –±–µ–≥", "‚è± —Ä–µ–∂–∏–º –±—ñ–≥", "‚è± running mode"])
def run_menu(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == "ru":
        markup.add("üèÅ –ù–∞—á–∞—Ç—å –±–µ–≥", "‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–≥")
        markup.add("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "üèÉ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è SHARKAN RUN:", reply_markup=markup)
    elif lang == "en":
        markup.add("üèÅ Start run", "‚õîÔ∏è Stop run")
        markup.add("üìä My results", "‚¨ÖÔ∏è Main menu")
        bot.send_message(message.chat.id, "üèÉ‚Äç‚ôÇÔ∏è Choose an action for SHARKAN RUN:", reply_markup=markup)
    else:
        markup.add("üèÅ –ü–æ—á–∞—Ç–∏ –±—ñ–≥", "‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–≥")
        markup.add("üìä –ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "üèÉ‚Äç‚ôÇÔ∏è –û–±–µ—Ä–∏ –¥—ñ—é –¥–ª—è SHARKAN RUN:", reply_markup=markup)

# === –ü–æ—á–∞—Ç–æ–∫ –±—ñ–≥—É ===
@bot.message_handler(func=lambda msg: "–ø–æ—á–∞—Ç–∏" in msg.text.lower() or "start" in msg.text.lower())
def start_run(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)
    running_sessions[user_id] = {"start": datetime.now()}

    text = {
        "ua": "üèÉ‚Äç‚ôÇÔ∏è –ë—ñ–∂–∏! –Ø —Ñ—ñ–∫—Å—É—é —Ç–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n‚õîÔ∏è –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–≥¬ª, –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à.",
        "ru": "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥–∏! –Ø —Ñ–∏–∫—Å–∏—Ä—É—é —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n‚õîÔ∏è –ù–∞–∂–º–∏ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–≥¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.",
        "en": "üèÉ‚Äç‚ôÇÔ∏è Run! I'm tracking your session.\n‚õîÔ∏è Tap 'Stop run' when you‚Äôre done."
    }
    bot.send_message(message.chat.id, text.get(lang, text["ua"]))

# === –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—ñ–≥—É ===
@bot.message_handler(func=lambda msg: "–∑–∞–≤–µ—Ä—à–∏—Ç–∏" in msg.text.lower() or "stop" in msg.text.lower())
def end_run(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)

    if user_id not in running_sessions:
        text = {
            "ua": "‚ùå –ü—Ä–æ–±—ñ–∂–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ü–æ—á–∞—Ç–∏ –±—ñ–≥¬ª.",
            "ru": "‚ùå –ë–µ–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å –±–µ–≥¬ª.",
            "en": "‚ùå Run not active. Tap 'Start run'."
        }
        bot.send_message(message.chat.id, text.get(lang, text["ua"]))
        return

    start_time = running_sessions[user_id]["start"]
    end_time = datetime.now()
    duration_min = round((end_time - start_time).seconds / 60)

    # –í–∞–≥–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
    try:
        with open("user_profiles.json", "r") as f:
            profiles = json.load(f)
        weight = int(profiles.get(user_id, {}).get("weight", 70))
    except:
        weight = 70

    calories = calculate_calories(weight, duration_min)
    save_run_result(user_id, duration_min, calories)
    del running_sessions[user_id]

    text = {
        "ua": f"‚úÖ –ü—Ä–æ–±—ñ–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_min} —Ö–≤\nüî• –°–ø–∞–ª–µ–Ω–æ: {calories} –∫–∫–∞–ª\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "ru": f"‚úÖ –ë–µ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_min} –º–∏–Ω\nüî• –°–æ–∂–∂–µ–Ω–æ: {calories} –∫–∫–∞–ª\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "en": f"‚úÖ Run finished!\n‚è± Duration: {duration_min} min\nüî• Burned: {calories} kcal\nüì¶ Result saved."
    }
    bot.send_message(message.chat.id, text.get(lang, text["ua"]))

# === –ü–µ—Ä–µ–≥–ª—è–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ===
@bot.message_handler(func=lambda msg: "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" in msg.text.lower())
def show_results(message):
    user_id = str(message.from_user.id)
    lang = get_lang(user_id)

    try:
        with open(RUN_HISTORY_FILE, "r") as f:
            run_history = json.load(f)
        records = run_history.get(user_id, [])
    except:
        records = []

    if not records:
        text = {
            "ua": "‚ùå –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–±—ñ–∂–æ–∫.",
            "ru": "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–∂–µ–∫.",
            "en": "‚ùå No saved runs."
        }
        bot.send_message(message.chat.id, text.get(lang, text["ua"]))
        return

    response = {
        "ua": "üìä –û—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–±—ñ–∂–∫–∏:\n",
        "ru": "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏:\n",
        "en": "üìä Recent runs:\n"
    }[lang]

    for run in reversed(records[-3:]):
        response += f"üìÖ {run['date']} ‚Äî {run['duration_min']} —Ö–≤ ‚Äî {run['calories']} –∫–∫–∞–ª\n"

    bot.send_message(message.chat.id, response)
    
# === –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    chat_id = call.message.chat.id
    user_id = str(call.from_user.id)
    lang = call.data.split("_")[1]

    user_profiles[user_id] = user_profiles.get(user_id, {})
    user_profiles[user_id]["language"] = lang
    user_lang[user_id] = lang
    save_profiles()

    if lang == "ua":
        text = "‚úÖ –¢–≤–æ—è –º–æ–≤–∞ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞. –í—ñ—Ç–∞—î–º–æ –≤ SHARKAN BOT!\n\nüë§ –û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–Ø ‚Äî —á–æ–ª–æ–≤—ñ–∫", callback_data="gender_male"),
            types.InlineKeyboardButton("–Ø ‚Äî –∂—ñ–Ω–∫–∞", callback_data="gender_female")
        )
    elif lang == "ru":
        text = "‚úÖ –í–∞—à —è–∑—ã–∫ ‚Äî —Ä—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SHARKAN BOT!\n\nüë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–Ø ‚Äî –º—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
            types.InlineKeyboardButton("–Ø ‚Äî –∂–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")
        )
    else:
        text = "‚úÖ Your language is English. Welcome to SHARKAN BOT!\n\nüë§ Select your gender:"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("I am a man", callback_data="gender_male"),
            types.InlineKeyboardButton("I am a woman", callback_data="gender_female")
        )

    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=text, reply_markup=markup)

# === –ö–æ–º–∞–Ω–¥–∞ /motivation ===
@bot.message_handler(commands=['motivation'])
def send_motivation(message):
    user_id = str(message.from_user.id)
    lang = user_lang.get(user_id, 'ua')
    phrases = motivation_data.get(lang, [])
    if phrases:
        bot.send_message(message.chat.id, random.choice(phrases))
    else:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –º–æ—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ç–≤–æ—î—ó –º–æ–≤–∏.")

# === –í—ã–±–æ—Ä –ø–æ–ª–∞ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("gender_"))
def handle_gender(call):
    chat_id = call.message.chat.id
    user_id = str(call.from_user.id)
    gender = call.data.split("_")[1]  # male / female

    user_profiles[user_id]["gender"] = gender
    save_profiles()

    lang = user_lang.get(user_id, "ua")
    confirm = {
        "ua": "‚úÖ –°—Ç–∞—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        "ru": "‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "en": "‚úÖ Gender saved."
    }

    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id)
    bot.send_message(chat_id, confirm.get(lang, "‚úÖ Done."))
    menu_from_id(chat_id, user_id)

# === –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏–∑ JSON ===
@bot.message_handler(func=lambda message: message.text.lower() in [
    "üß† –º–æ—Ç–∏–≤–∞—Ü—ñ—è", "üíñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è", "üß† –º–æ—Ç–∏–≤–∞—Ü–∏—è", "üíñ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "üß† motivation", "üíñ inspiration"
])
def motivation_handler(message):
    user_id = str(message.from_user.id)
    lang = user_lang.get(user_id, "ua")
    phrases = motivation_data.get(lang, [])

    if phrases:
        bot.send_message(message.chat.id, random.choice(phrases))
    else:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –º–æ—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ç–≤–æ—î—ó –º–æ–≤–∏.")

    bot.send_message(message.chat.id, text)

# === –°–æ–≤–µ—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤ ===
@bot.message_handler(func=lambda message: message.text.lower() in [
    "üéì –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤", "üéì —Å–æ–≤–µ—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "üéì pro trainer tips"
])
def coach_tip_handler(message):
    user_id = str(message.from_user.id)
    lang = user_lang.get(user_id, "ua")
    tips = coaches_data.get(lang, [])

    if not tips:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–º–∞—î –ø–æ—Ä–∞–¥ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏.")
        return

    coach = random.choice(tips)
    name = coach.get("name", "–ë–µ–∑ —ñ–º–µ–Ω—ñ")
    bio = coach.get(f"bio_{lang}", coach.get("bio", ""))
    tip = coach.get(f"tip_{lang}", coach.get("tip", ""))

    text = f"üë§ *{name}*\n\nüß¨ _{bio}_\n\n{tip}"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def menu_from_id(chat_id, user_id):
    lang = user_lang.get(user_id, "ua")
    gender = user_profiles.get(user_id, {}).get("gender", "male")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    buttons = []

    if lang == "ua":
        if gender == "female":
            buttons = [
                "üî• –ú—ñ–π –ø–ª–∞–Ω", "üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üíñ –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è", "‚è± –†–µ–∂–∏–º –ë–Ü–ì",
                "ü•∑ –ë—ñ–π –∑ –¢—ñ–Ω–Ω—é", "üìö –ö–Ω–∏–≥–∏ SHARKAN", "üéì –ü–æ—Ä–∞–¥–∏ –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤", "ü§ñ AI SHARKAN",
                "üåü –í–∏–∫–ª–∏–∫", "üíé SHRK COINS", "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å", "üìà –ü—Ä–æ–≥—Ä–µ—Å / –†–∞–Ω–≥–∏",
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN", "üéµ –ú—É–∑–∏–∫–∞", "üëë –ú—ñ–π —à–ª—è—Ö", "üõç –ú–∞–≥–∞–∑–∏–Ω",
                "üí¨ –ß–∞—Ç SHARKAN", "üì¢ –ö–∞–Ω–∞–ª SHARKAN", "üßò‚Äç‚ôÄÔ∏è –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è", "üîí –¢–µ–º–Ω–∞ –ó–æ–Ω–∞",
                "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚ùì FAQ / –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", "üì® –°–ø—ñ–≤–ø—Ä–∞—Ü—è"
            ]
        else:
            buttons = [
                "üî• –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üß† –ú–æ—Ç–∏–≤–∞—Ü—ñ—è", "‚è± –†–µ–∂–∏–º –ë–Ü–ì",
                "ü•∑ –ë—ñ–π –∑ –¢—ñ–Ω–Ω—é", "üìö –ö–Ω–∏–≥–∏ SHARKAN", "üéì –ü–æ—Ä–∞–¥–∏ –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä—ñ–≤", "ü§ñ AI SHARKAN",
                "ü•á –í–∏–∫–ª–∏–∫", "ü™ô SHRK COINS", "üìä –ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN", "üéµ –ú—É–∑–∏–∫–∞", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "üõç –ú–∞–≥–∞–∑–∏–Ω",
                "üí¨ –ß–∞—Ç SHARKAN", "üì¢ –ö–∞–Ω–∞–ª SHARKAN", "üßò –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è", "üîí –¢–µ–º–Ω–∞ –ó–æ–Ω–∞",
                "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / FAQ", "üì® –°–ø—ñ–≤–ø—Ä–∞—Ü—è"
            ]

    elif lang == "ru":
        if gender == "female":
            buttons = [
                "üî• –ú–æ–π –ø–ª–∞–Ω", "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "üíñ –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "‚è± –†–µ–∂–∏–º –ë–ï–ì",
                "ü•∑ –ë–æ–π —Å –¢–µ–Ω—å—é", "üìö –ö–Ω–∏–≥–∏ SHARKAN", "üéì –°–æ–≤–µ—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "ü§ñ AI SHARKAN",
                "üåü –í—ã–∑–æ–≤", "üíé SHRK COINS", "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å / –†–∞–Ω–≥–∏",
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN", "üéµ –ú—É–∑—ã–∫–∞", "üëë –ú–æ–π –ø—É—Ç—å", "üõç –ú–∞–≥–∞–∑–∏–Ω",
                "üí¨ –ß–∞—Ç SHARKAN", "üì¢ –ö–∞–Ω–∞–ª SHARKAN", "üßò‚Äç‚ôÄÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "üîí –¢—ë–º–Ω–∞—è –ó–æ–Ω–∞",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üì® –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"
            ]
        else:
            buttons = [
                "üî• –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "üß† –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "‚è± –†–µ–∂–∏–º –ë–ï–ì",
                "ü•∑ –ë–æ–π —Å –¢–µ–Ω—å—é", "üìö –ö–Ω–∏–≥–∏ SHARKAN", "üéì –°–æ–≤–µ—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤", "ü§ñ AI SHARKAN",
                "ü•á –í—ã–∑–æ–≤", "ü™ô SHRK COINS", "üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ SHARKAN", "üéµ –ú—É–∑—ã–∫–∞", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üõç –ú–∞–≥–∞–∑–∏–Ω",
                "üí¨ –ß–∞—Ç SHARKAN", "üì¢ –ö–∞–Ω–∞–ª SHARKAN", "üßò –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "üîí –¢—ë–º–Ω–∞—è –ó–æ–Ω–∞",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å / FAQ", "üì® –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"
            ]

    elif lang == "en":
        if gender == "female":
            buttons = [
                "üî• My Plan", "üèãÔ∏è Workout", "üíñ Inspiration", "‚è± Running Mode",
                "ü•∑ Shadow Fight", "üìö SHARKAN Books", "üéì Pro Trainer Tips", "ü§ñ AI SHARKAN",
                "üåü Challenge", "üíé SHRK COINS", "üìä My Progress", "üìà Progress / Ranks",
                "üèÜ SHARKAN Ranking", "üéµ Music", "üëë My Path", "üõç Shop",
                "üí¨ SHARKAN Chat", "üì¢ SHARKAN Channel", "üßò‚Äç‚ôÄÔ∏è Recovery", "üîí Dark Zone",
                "‚öôÔ∏è Settings", "‚ùì Help / FAQ", "üì® Contact Us"
            ]
        else:
            buttons = [
                "üî• Today's Plan", "üèãÔ∏è Workout", "üß† Motivation", "‚è± Running Mode",
                "ü•∑ Shadow Fight", "üìö SHARKAN Books", "üéì Pro Trainer Tips", "ü§ñ AI SHARKAN",
                "ü•á Challenge", "ü™ô SHRK COINS", "üìä My Results", "üìà Statistics",
                "üèÜ SHARKAN Ranking", "üéµ Music", "üë§ My Profile", "üõç Shop",
                "üí¨ SHARKAN Chat", "üì¢ SHARKAN Channel", "üßò Recovery", "üîí Dark Zone",
                "‚öôÔ∏è Settings", "‚ùì Help / FAQ", "üì® Contact Us"
            ]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–≤–∞ —Ä—è–¥–∞
    for i in range(0, len(buttons), 2):
        markup.add(*buttons[i:i + 2])

    bot.send_message(chat_id, "üß† –û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª:" if lang == "ua" else
                                 "üß† –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:" if lang == "ru" else
                                 "üß† Choose a section:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text.lower() in ["‚¨ÖÔ∏è –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è main menu"])
def back_to_main_menu(message):
    user_id = str(message.from_user.id)
    menu_from_id(message.chat.id, user_id)
    
# === –ó–∞–ø—É—Å–∫ ===
print(f"{VERSION} –∑–∞–ø—É—â–µ–Ω–æ.")
bot.infinity_polling()

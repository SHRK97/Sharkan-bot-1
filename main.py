import os
import json
import logging
from datetime import datetime
from telebot import TeleBot, types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(BOT_TOKEN)
ADMIN_ID = 693609628
VERSION = "SHARKAN BOT v1.0 ‚Äî FULL LAUNCH"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    filemode="a",
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s"
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π ===
USER_PROFILE_FILE = "user_profiles.json"
if os.path.exists(USER_PROFILE_FILE):
    with open(USER_PROFILE_FILE, "r") as f:
        user_profiles = json.load(f)
else:
    user_profiles = {}

def save_profiles():
    try:
        with open(USER_PROFILE_FILE, "w") as f:
            json.dump(user_profiles, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logging.error(f"[SAVE_PROFILE_ERROR] {e}")

# === –Ø–∑—ã–∫–∏ ===
LANGUAGES = {'ua': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}
user_lang = {}

# === /start ===
@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    for code, name in LANGUAGES.items():
        markup.add(types.InlineKeyboardButton(name, callback_data=f"lang_{code}"))
    bot.send_message(message.chat.id, "üëã –û–±–µ—Ä–∏ –º–æ–≤—É / Choose your language:", reply_markup=markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞ + –ú–µ–Ω—é ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    chat_id = call.message.chat.id
    user_id = str(call.from_user.id)
    lang = call.data.split("_")[1]
    
    user_profiles[user_id] = user_profiles.get(user_id, {})
    user_profiles[user_id]["language"] = lang
    user_lang[user_id] = lang
    save_profiles()

    if lang == "ua":
        welcome_text = "‚úÖ –¢–≤–æ—è –º–æ–≤–∞ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞. –í—ñ—Ç–∞—î–º–æ –≤ SHARKAN BOT!"
    elif lang == "ru":
        welcome_text = "‚úÖ –í–∞—à —è–∑—ã–∫ ‚Äî —Ä—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SHARKAN BOT!"
    elif lang == "en":
        welcome_text = "‚úÖ Your language is English. Welcome to SHARKAN BOT!"
    else:
        welcome_text = "‚úÖ Language set."

    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=welcome_text)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≤—ñ–¥—Ä–∞–∑—É
markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

if lang == "ua":
    buttons = ["üî• –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üß† –ú–æ—Ç–∏–≤–∞—Ü—ñ—è", "‚öîÔ∏è Shadow Mode", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "üìä –ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", "ü•á –í–∏–∫–ª–∏–∫", "ü™ô SHRK COINS", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
elif lang == "ru":
    buttons = ["üî• –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "üß† –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "‚öîÔ∏è Shadow Mode", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "ü•á –í—ã–∑–æ–≤", "ü™ô SHRK COINS", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
else:
    buttons = ["üî• Today‚Äôs Plan", "üèãÔ∏è Workout", "üß† Motivation", "‚öîÔ∏è Shadow Mode", "üë§ My Profile", "üìä My Results", "ü•á Challenge", "ü™ô SHRK COINS", "‚öôÔ∏è Settings"]

markup.add(*buttons)
bot.send_message(chat_id, "üìã –ú–µ–Ω—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ:", reply_markup=markup)

# === /–ø—Ä–æ—Ñ—ñ–ª—å ‚Äî –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ===
@bot.message_handler(commands=["–ø—Ä–æ—Ñ—ñ–ª—å"])
def profile_setup(message):
    user_id = str(message.from_user.id)
    msg = bot.send_message(message.chat.id, "üìè –í–≤–µ–¥–∏ —Å–≤—ñ–π —Ä—ñ—Å—Ç (—É —Å–º):")
    bot.register_next_step_handler(msg, lambda m: get_height(m, user_id))

def get_height(message, user_id):
    try:
        height = int(message.text.strip())
        user_profiles[user_id] = {"height": height}
        msg = bot.send_message(message.chat.id, "‚öñÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é –≤–∞–≥—É (—É –∫–≥):")
        bot.register_next_step_handler(msg, lambda m: get_weight(m, user_id))
    except:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        profile_setup(message)

def get_weight(message, user_id):
    try:
        weight = int(message.text.strip())
        user_profiles[user_id]["weight"] = weight
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–°—Ö—É–¥–Ω—É—Ç–∏", "–ù–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É", "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É")
        msg = bot.send_message(message.chat.id, "üéØ –û–±–µ—Ä–∏ —Å–≤–æ—é —Ü—ñ–ª—å:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: get_goal(m, user_id))
    except:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        profile_setup(message)

def get_goal(message, user_id):
    goal = message.text.strip()
    user_profiles[user_id]["goal"] = goal
    save_profiles()
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\nüìè –†—ñ—Å—Ç: {user_profiles[user_id]['height']} —Å–º\n‚öñÔ∏è –í–∞–≥–∞: {user_profiles[user_id]['weight']} –∫–≥\nüéØ –¶—ñ–ª—å: {goal}")

# === /–º—ñ–π–ø—Ä–æ—Ñ—ñ–ª—å ‚Äî –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é ===
@bot.message_handler(commands=["–º—ñ–π–ø—Ä–æ—Ñ—ñ–ª—å"])
def show_profile(message):
    user_id = str(message.from_user.id)
    profile = user_profiles.get(user_id)
    if profile:
        bot.send_message(
            message.chat.id,
            f"üë§ –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:\nüìè –†—ñ—Å—Ç: {profile.get('height')} —Å–º\n‚öñÔ∏è –í–∞–≥–∞: {profile.get('weight')} –∫–≥\nüéØ –¶—ñ–ª—å: {profile.get('goal')}"
        )
    else:
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏ /–ø—Ä–æ—Ñ—ñ–ª—å —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
@bot.message_handler(func=lambda m: True)
def handle_text(message):
    user_id = str(message.from_user.id)
    lang = user_lang.get(user_id, "ua")
    text = message.text.strip().lower()

    if text in ["–º–æ—Ç–∏–≤–∞—Ü—ñ—è", "motivation"]:
        try:
            with open("audio/motivation.mp3", "rb") as audio:
                bot.send_audio(message.chat.id, audio, caption="üéß –°–ª—É—Ö–∞–π. –ü–∞–º‚Äô—è—Ç–∞–π. –î—ñ–π.")
        except:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –º–æ—Ç–∏–≤–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    elif text in ["shadow mode"]:
        bot.send_message(message.chat.id, "‚öîÔ∏è Shadow Mode –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.\n–¶–µ —Ä–µ–∂–∏–º —Å–∞–º–æ—Ç–∏. –¢—É—Ç –Ω–µ–º–∞—î –ª–∞–π–∫—ñ–≤. –ù–µ–º–∞—î –æ–ø–ª–µ—Å–∫—ñ–≤. –Ñ –ª–∏—à–µ —Ç–∏ –ø—Ä–æ—Ç–∏ —Å–µ–±–µ.")
    elif text in ["–º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "my profile"]:
        show_profile(message)
    elif text in ["–ø–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "today‚Äôs plan"]:
        bot.send_message(message.chat.id, "üìÖ –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n- üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: –≤—Å–µ —Ç—ñ–ª–æ\n- üíß –í–æ–¥–∞: 2 –ª\n- üçΩÔ∏è –á–∂–∞: –±—ñ–ª–∫–∏ + –æ–≤–æ—á—ñ\n- ‚öîÔ∏è Shadow Mode: 1 —Å–µ—Å—ñ—è")
    else:
        bot.send_message(message.chat.id, "üìç –í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥–∏ /menu")

# === –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω) ===
@bot.message_handler(commands=["clearlog"])
def clear_log(message):
    if message.from_user.id == ADMIN_ID:
        open("bot.log", "w").close()
        bot.send_message(message.chat.id, "üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "üö´ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")

# === –ó–∞–ø—É—Å–∫ ===
print(f"{VERSION} –∑–∞–ø—É—â–µ–Ω–æ.")
bot.infinity_polling()
